<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Optimized Reasoning with Guarded Logic on</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/</link><description>Recent content in Optimized Reasoning with Guarded Logic on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/The-Dynamic-Programming-Algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/The-Dynamic-Programming-Algorithm/</guid><description>Consider the following recursively defined problem:
Definition. Let $\mathcal{L}$ be a language, $\Sigma$ be a set of $\mathcal{L}$-GTGDs with single-headed existential rules, $Q = \exists \vec{z}.</description></item><item><title>2022-11-01 About template constraints</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/thoughts/2022-11-01-About-template-constraints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/thoughts/2022-11-01-About-template-constraints/</guid><description>Constraints on Partitioning Imposed by the Query Suppose that the following query is given as $Q = \exists xyz. R(x, y) \wedge R(y, z)$.</description></item><item><title>2022-11-09 Head-Tentacle Partitions and Pseudo-Witnesses</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/thoughts/2022-11-09-Head-Tentacle-Partitions-and-Pseudo-Witnesses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/thoughts/2022-11-09-Head-Tentacle-Partitions-and-Pseudo-Witnesses/</guid><description>We explorered before in [[2022-11-01 About template constraints#Constraints on Partitioning Imposed by the Query]] a few possibility on how the entire query can be witnessed by nulls in different tentacles.</description></item><item><title>Books</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/references/Books/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/references/Books/</guid><description>Introduction to Graph and Hypergraph Theory ^327283
SOLO permalink, EBook ISBN: 9781614701125
I used a few terminologies from this book to describe/define notions about hypergraphs.</description></item><item><title>Chase-Like Trees and Saturated Chase-Like Trees</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/definitions/Chase-Like-Trees-and-Saturated-Chase-Like-Trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/definitions/Chase-Like-Trees-and-Saturated-Chase-Like-Trees/</guid><description>This note builds on [[Saturations]]
We shall define a tree structure that &amp;ldquo;stems from a base instance $I$ and witnesses every possible conclusion that can be $\Sigma$-deduced from $I$&amp;rdquo;.</description></item><item><title>General Notations</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/definitions/General-Notations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/definitions/General-Notations/</guid><description>This section defines general notations used throughout the notes.
For a formal finite sequence $(X_1, \ldots, X_n)$ of same sorts, we abbriviate it as $\vec{X}$.</description></item><item><title>Logic Preliminaries</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/definitions/Logic-Preliminaries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/definitions/Logic-Preliminaries/</guid><description>This note builds on [[General Notations]].
This note mainly pulls definitions from Rewriting the Infinite Chase, but with quite a lot of modifications.</description></item><item><title>Papers</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/references/Papers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/references/Papers/</guid><description>Rewriting the Infinite Chase ^a74196
Link: latest version on GitHub pages
TODO: write down the ideas that are explored in this paper</description></item><item><title>Preliminary Results on Saturated Chase-Like Trees</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/Preliminary-Results-on-Saturated-Chase-Like-Trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/Preliminary-Results-on-Saturated-Chase-Like-Trees/</guid><description>General Definitions surrounding $\SatTree$s Definition. For chase-like tree $T$ and its vertex $v \in T_0$, we say that $v$ mentions a factual term $t$ if $\Instance_T(v)$ contains a fact $P(\vec{t&amp;rsquo;})$ such that $t \in \elems(\vec{t&amp;rsquo;})$.</description></item><item><title>Reducing Query-Rule-Rewriting Problem to BCQ Answerings</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/Reducing-Query-Rule-Rewriting-Problem-to-BCQ-Answerings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/Reducing-Query-Rule-Rewriting-Problem-to-BCQ-Answerings/</guid><description>We shall build on definitions given in [[Chase-Like Trees and Saturated Chase-Like Trees]]. We will also rely on the results in [[Preliminary Results on Saturated Chase-Like Trees]], and [[Witness Fragmentation and Witness Gluing]].</description></item><item><title>Rewritings</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/definitions/Rewritings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/definitions/Rewritings/</guid><description>This note builds on [[Logic Preliminaries]].
Conjunctive Query Answering Through the language of substitutions, we define what it means to answer a conjunctive query.</description></item><item><title>Saturations</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/definitions/Saturations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/definitions/Saturations/</guid><description>This note builds on [[Rewritings]]
Given an instance $I$ and a finite set $\Sigma$ of Datalog rules, we can form the smallest superinstance of $I$ satisfying $\Sigma$, which we shall call $\Sat_\Sigma(I)$.</description></item><item><title>Solving the BCQ Answering</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/Solving-the-BCQ-Answering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/Solving-the-BCQ-Answering/</guid><description>In [[Reducing Query-Rule-Rewriting Problem to BCQ Answerings]], we saw how to reduce the query-rewriting problem to exponentially many, mostly independent subproblems of BCQ answerings.</description></item><item><title>Tentacle Ejection Templates</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/Tentacle-Ejection-Templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/Tentacle-Ejection-Templates/</guid><description>Preliminaries In-place unifications We shall first define what it means to identify (in-place) variables in a GTGD rule.
Definition. Let $\vec{x}$ be a set of variables.</description></item><item><title>Witness Fragmentation and Witness Gluing</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/Witness-Fragmentation-and-Witness-Gluing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/Witness-Fragmentation-and-Witness-Gluing/</guid><description>This note depends on [[Preliminary Results on Saturated Chase-Like Trees]].
This note explores the relationship between ordinary witnesses and &amp;ldquo;fragmented witnesses&amp;rdquo;, which will be defined in the following sections.</description></item></channel></rss>