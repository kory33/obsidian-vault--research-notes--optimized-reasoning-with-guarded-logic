<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Optimized Reasoning with Guarded Logic on</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/</link><description>Recent content in Optimized Reasoning with Guarded Logic on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/index.xml" rel="self" type="application/rss+xml"/><item><title>2022-11-01: About template constraints</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/thoughts/2022-11-01-About-template-constraints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/thoughts/2022-11-01-About-template-constraints/</guid><description>Constraints on Partitioning Imposed by the Query Suppose that the following query is given as $Q = \exists xyz. R(x, y) \wedge R(y, z)$.</description></item><item><title>Chase-Like Trees and Saturated Chase-Like Trees</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/definitions/Chase-Like-Trees-and-Saturated-Chase-Like-Trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/definitions/Chase-Like-Trees-and-Saturated-Chase-Like-Trees/</guid><description>This note builds on [[Rewriting, Existential Lifting and Saturation]]
We shall define a tree structure that &amp;ldquo;stems from a base instance $I$ and witnesses every possible conclusion that can be $\Sigma$-deduced from $I$&amp;rdquo;.</description></item><item><title>Decomposing the Larger Problem into Smaller Subproblems</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/Decomposing-the-Larger-Problem-into-Smaller-Subproblems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/Decomposing-the-Larger-Problem-into-Smaller-Subproblems/</guid><description>We shall build on definitions given in [[Chase-Like Trees and Saturated Chase-Like Trees]].
We first make the following claim:</description></item><item><title>General Notations</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/definitions/General-Notations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/definitions/General-Notations/</guid><description>MathJax macros: $$\def\elems{{\operatorname{elems}}}$$
This section defines general notations used throughout the notes.
For a formal finite sequence $(X_1, \ldots, X_n)$ of same sorts, we abbriviate it as $\vec{X}$.</description></item><item><title>Logic Preliminaries</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/definitions/Logic-Preliminaries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/definitions/Logic-Preliminaries/</guid><description>This note builds on [[General Notations]].
This note mainly pulls definitions from Rewriting the Infinite Chase, but with quite a lot of modifications.</description></item><item><title>Papers</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/references/Papers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/references/Papers/</guid><description>Rewriting the Infinite Chase Link: latest version on GitHub pages
TODO: write down the ideas that are explored in this paper</description></item><item><title>Rewriting, Existential Lifting and Saturation</title><link>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/definitions/Rewriting-Existential-Lifting-and-Saturation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kory33.github.io/obsidian-vault--research-notes--optimized-reasoning-with-guarded-logic/notes/definitions/Rewriting-Existential-Lifting-and-Saturation/</guid><description>This note builds on [[Logic Preliminaries]]
Given a set $\Sigma$ of TGDs, a Datalog program $\Sigma_{\text{rew}}$ is a rewriting of $\Sigma$ if for every base instance $I$, $\Sigma$ and $\Sigma_{\text{rew}}$ generate the same set of consequences, i.</description></item></channel></rss>